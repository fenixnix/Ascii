Table of Contents
─────────────────

1 股权证明 POS:Proof of Stake
2 委任权益证明 DPOS:Delegated Proof of Stake
3 拜占庭共识算法 BFT: Byzantine Fault Tolerance
4 纠删码 Erasure Codes


1 股权证明 POS:Proof of Stake
═════════════════════════════

  • 简述：也称股权证明，类似于财产储存在银行，这种模式会根据你持有数字货
    币的量和时间，分配给你相应的利息。简单来说，就是一个根据你持有货币的
    量和时间，给你发利息的一个制度，在股权证明POS模式下，有一个名词叫币
    龄，每个币每天产生1币龄比如你持有100个币，总共持有了30天，那么，此时
    你的币龄就为3000这个时候，如果你发现了一个POS区块，你的币龄就会被清
    空为0你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可
    理解为年利率5%)这个案例中，利息 = 3000 * 5% / 365 = 0.41个币，持币有
    利息。
  • hash(block_header) =< target*coinage
  • coinage = balance*币的剩余使用时间
  • 流程：
    1. 由权益证明来选择记账人
    2. 将连入网络的节点加入记账候选人列表并排序，将持币数高的几个作为记
       账候选人
    3. 在线的候选人根据在线时间持续增长币龄
    4. 币龄将会在节点不在线时衰减，在线后持续增加
    5. 候选权受持币数和币龄的影响
    6. 根据上个区块的哈希并考量持币数和币龄随机选择记账人
    7. 记账人在获得出块权后分发广播区块
    8. 记账人及候选人之间采用BFT共识（BFT）
    9. 其余记账人验证区块后写入并进入下一轮
    10. 记账人出块后后根据币龄获取收益，并清空出块人的币龄


2 委任权益证明 DPOS:Delegated Proof of Stake
════════════════════════════════════════════

  • 简述：它的原理是让每一个持有比特股的人进行投票，由此产生101位代表我
    们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是
    完全相等的从某种角度来看，DPOS有点像是议会制度或人民代表大会制度如果
    代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，
    网络会选出新的超级节点来取代他们DPOS的出现最主要还是因为矿机的产生，
    大量的算力在不了解也不关心比特币的人身上
  • 流程：
    1. 选举代表（一定时间后重复）
       • eos: 24h * 21 member
    2. 代表随机排序后按顺序出块
       • eos: 21 member * 6 round
    3. 候选人之间通过BFT共识（BFT）
    4. 每个周期完成后重新随机顺序


3 拜占庭共识算法 BFT: Byzantine Fault Tolerance
═══════════════════════════════════════════════

  • 简述：三阶段协议（预准备，准备，确认），这个算法在保证活性和安全性
    （liveness & safety）的前提下提供了(n-1)/3的容错性，从而解决BFT问题。
  • 流程：
    • 正常情况
      1. 预准备：发起人向所有节点发预准备消息，所有节点确认验证预准备消息
      2. 准备：所有节点向所有其他节点发送加入自己准备消息的消息，收集来
         自其他节点的准备消息至2F+1，并广播确认
      3. 确认：所有人收集到2F+1的确认则完成一轮


4 纠删码 Erasure Codes
══════════════════════

  • 简述：纠删码技术主要是通过纠删码算法将原始的数据进行编码得到冗余，并
    将数据和冗余一并存储起来，以达到容错的目的。
  • 算法概述：将n块原始数据通过一定计算得到m块冗余元素
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        1     0     0     0     0             D_1 
        0     1     0     0     0     D_1     D_2 
        0     0     1     0     0     D_2     D_3 
        0     0     0     1     0  *  D_3  =  D_4 
        0     0     0     0     1     D_4     D_5 
     B_11  B_12  B_13  B_14  B_15     D_5     C_1 
     B_21  B_22  B_23  B_24  B_25             C_2 
     B_31  B_32  B_33  B_34  B_35             C_3 
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  • 特性：
    • 低冗余
    • 数据恢复代价高
    • 数据更新代价高
  • 实现：
    • RS：Reed-Solomon
  • 分支：
    • 喷泉码 Fountain Codes（无率码 Rateless Codes）
      • 简述：发送端可以由k个原始分组生成任意数量的编码分组接收端只要收
        到其中任意(1+ε)k个编码分组，即可通过译码以高概率成功恢复全部原
        始分组精心设计的数字喷泉码不仅拥有很小的译码开销ε，而且具有简单
        的编译码方法和很小的编译码复杂度。
      • 实现：
        • LT Codes
        • Raptor Codes（Rapid Tornado）
        • Tonado Codes
